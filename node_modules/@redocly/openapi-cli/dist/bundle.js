"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.bundle = exports.bundleToFile = void 0;

var path = _interopRequireWildcard(require("path"));

var fs = _interopRequireWildcard(require("fs"));

var _jsYaml = _interopRequireDefault(require("js-yaml"));

var _config = require("./config");

var _traverse = _interopRequireDefault(require("./traverse"));

var _context = _interopRequireDefault(require("./context"));

var _OAS = require("./types/OAS3");

var _OAS2 = require("./types/OAS2");

var _utils = require("./utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function writeBundleToFile(bundleObject, outputFile) {
  const nameParts = outputFile.split('.');
  const ext = nameParts[nameParts.length - 1];
  const outputPath = path.resolve(outputFile);
  const outputDir = path.dirname(outputPath);
  fs.mkdirSync(outputDir, {
    recursive: true
  });
  let fileData = null;

  switch (ext) {
    case 'json':
      fileData = JSON.stringify(bundleObject, null, 2);
      break;

    case 'yaml':
    case 'yml':
    default:
      fileData = _jsYaml.default.safeDump(bundleObject);
      break;
  }

  fs.writeFileSync(`${outputPath}`, fileData);
}

const bundleToFile = async (fName, outputFile, force) => {
  const resolvedFileName = fName; // path.resolve(fName);

  const {
    document,
    source
  } = (0, _utils.readYaml)(resolvedFileName);

  if (!document.openapi && !document.swagger) {
    return [];
  }

  const lintConfig = (0, _config.getLintConfig)({});
  lintConfig.rules = { ...lintConfig.rules,
    bundler: { ...(lintConfig.rules && typeof lintConfig.rules.bundler === 'object' ? lintConfig.rules.bundler : null),
      output: outputFile,
      ignoreErrors: force
    }
  };
  const ctx = (0, _context.default)(document, source, resolvedFileName, lintConfig);
  const rootNode = ctx.openapiVersion === 3 ? _OAS.OpenAPIRoot : _OAS2.OAS2Root;
  await (0, _traverse.default)(document, rootNode, ctx);

  if (outputFile) {
    writeBundleToFile(ctx.bundlingResult, outputFile);
  } else {
    process.stdout.write(_jsYaml.default.safeDump(ctx.bundlingResult));
    process.stdout.write('\n');
  }

  return ctx.result;
};

exports.bundleToFile = bundleToFile;

const bundle = async (fName, force, options) => {
  const resolvedFileName = fName; // path.resolve(fName);

  const {
    document,
    source
  } = (0, _utils.readYaml)(resolvedFileName);

  if (!document.openapi && !document.swagger) {
    return [];
  }

  const config = (0, _config.getLintConfig)(options);
  config.rules = { ...config.rules,
    bundler: { ...(config.rules && typeof config.rules.bundler === 'object' ? config.rules.bundler : null),
      outputObject: true,
      ignoreErrors: force
    }
  };
  const ctx = (0, _context.default)(document, source, resolvedFileName, config);
  await (0, _traverse.default)(document, _OAS.OpenAPIRoot, ctx);
  return {
    bundle: ctx.bundlingResult,
    result: ctx.result,
    fileDependencies: ctx.fileDependencies
  };
};

exports.bundle = bundle;
var _default = bundleToFile;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,